# coding: utf-8

"""
RouteApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class RouteApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def t_tds_route(self, body, **kwargs):
        """
        The travel time along a route in the future
        Please see the JSON documentation here: http://json.org/\nPlease see the Encoded Polyline Algorithm Format here: https://developers.google.com/maps/documentation/utilities/polylinealgorithm\nPlease review the TTDS \u2013 Mobile Application API Specification - https://opendata.transport.nsw.gov.au/content/dam/apiportal/transportnsw/docs/Live_Traffic_Data_Developer_Guide.pdf\n\nYou must add a parameter 'User-Agent' of value [application-name] '/' [major-version] '.' [minor-version] (e.g., AppName/1.0) and type 'header'.\nYou must add a parameter 'Content-Type' of value 'application/vnd.ttds-route+json' and type 'header'.\nIn the event the API returns a HTTP 400 Bad Request, a header named 'XX-Error-Msg' may return a more descriptive error message (e.g., 'No /route request message').\n\nHere is an example HTTP POST request body:\n\n  {\n\n    \"encoded-paths\": [\"jsumEge|y[t@FpId@`@BToCtAHrAJ~@GXBt@DN@JLvBLxE\\zCVbEVpFZjCR\\AjAD\\BHHf@Dn@DfCP|@BEr@GhAEn@Oh@[rCt@PjEx@lCb@n@JdAP\"],\n\n    \"departure-time\": 1695168000\n\n  }\n\n\nKnown Issues:\n\n\u2022You must use your keyboard to enter the paramater name 'User-Agent' and 'Content-Type' in the field below.\n\n\u2022If you receive an HTTP 500 Internal Server Error, please try again.\n\n\u2022If the 'submit' button below does not function, please try again.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.t_tds_route(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param object body:  (required)
        :param str x_user_agent: 
        :param str content_type: 
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_user_agent', 'content_type']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method t_tds_route" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `t_tds_route`")

        resource_path = '/ttds/route'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'x_user_agent' in params:
            header_params['X-User-Agent'] = params['x_user_agent']
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.ttds-route+json'])

        # Authentication setting
        auth_settings = ['oauth2']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='file',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
